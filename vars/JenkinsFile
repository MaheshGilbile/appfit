@Library('appfit@main') _
pipeline {
    agent any
    environment {
        MAVEN_HOME = tool name: 'Maven', type: 'hudson.tasks.Maven$MavenInstallation'
		BRANCH_NAME = 'main'
		NEXUS_CREDENTIALS_ID = 'artifactory-credentials'
    }

    stages {
        stage('SCM Checkout') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    checkout scmGit(branches: [[name: BRANCH_NAME]], extensions: [], gitTool: 'windows-git', userRemoteConfigs: [[credentialsId: 'bitbucket-access-creds', url: 'https://github.com/MaheshGilbile/MyApps.git']])
                }
            }
        }
        stage('Build') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                        script {
                            bat "${MAVEN_HOME}/bin/mvn clean install"
                        }
                    }
                    
                }
            }
        }
        stage('Unit Test Coverage') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                        script {
                            bat "${MAVEN_HOME}/bin/mvn clean test"
                        }
                    }
                }
            }
        }
        stage('Sonar Scanning') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                        script {
                            withSonarQubeEnv('SonarQubeServer') {
                                bat "${MAVEN_HOME}/bin/mvn sonar:sonar -Dsonar.projectKey=springboot-app"
                            }
                        }
                    }
                  
                }
            }
            
        }
        stage('Artifactory upload to NexusIQ') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${WORKSPACE}/settings.xml")]) {
                        withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIALS_ID, usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                            bat "${MAVEN_HOME}/bin/mvn clean install"
                            bat "${MAVEN_HOME}/bin/mvn deploy -s ${WORKSPACE}/settings.xml"
                        }
                    }
                }
            }
        }
    }
}
